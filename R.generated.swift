//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle

  let entitlements = entitlements()

  var string: string { .init(bundle: bundle, preferredLanguages: nil, locale: nil) }
  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var font: font { .init(bundle: bundle) }
  var file: file { .init(bundle: bundle) }

  func string(bundle: Foundation.Bundle) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: nil)
  }
  func string(locale: Foundation.Locale) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: locale)
  }
  func string(preferredLanguages: [String], locale: Locale? = nil) -> string {
    .init(bundle: bundle, preferredLanguages: preferredLanguages, locale: locale)
  }
  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func font(bundle: Foundation.Bundle) -> font {
    .init(bundle: bundle)
  }
  func file(bundle: Foundation.Bundle) -> file {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.font.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    let bundle: Foundation.Bundle
    let preferredLanguages: [String]?
    let locale: Locale?
    var localizable: localizable { .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale)) }

    func localizable(preferredLanguages: [String]) -> localizable {
      .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale))
    }


    /// This `_R.string.localizable` struct is generated, and contains static references to 4 localization keys.
    struct localizable {
      let source: RswiftResources.StringResource.Source

      /// en translation: Find your place in
      ///
      /// Key: home_screen_header_find_your_place
      ///
      /// Locales: en
      var home_screen_header_find_your_place: RswiftResources.StringResource { .init(key: "home_screen_header_find_your_place", tableName: "Localizable", source: source, developmentValue: "Find your place in", comment: nil) }

      /// en translation: I need to buy
      ///
      /// Key: home_screen_toggle_option_buy
      ///
      /// Locales: en
      var home_screen_toggle_option_buy: RswiftResources.StringResource { .init(key: "home_screen_toggle_option_buy", tableName: "Localizable", source: source, developmentValue: "I need to buy", comment: nil) }

      /// en translation: I need to rent
      ///
      /// Key: home_screen_toggle_option_rent
      ///
      /// Locales: en
      var home_screen_toggle_option_rent: RswiftResources.StringResource { .init(key: "home_screen_toggle_option_rent", tableName: "Localizable", source: source, developmentValue: "I need to rent", comment: nil) }

      /// en translation: Welcome
      ///
      /// Key: welcome_message
      ///
      /// Locales: en
      var welcome_message: RswiftResources.StringResource { .init(key: "welcome_message", tableName: "Localizable", source: source, developmentValue: "Welcome", comment: nil) }
    }
  }

  /// This `_R.color` struct is generated, and contains static references to 2 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }

    /// Color `primaryBackground`.
    var primaryBackground: RswiftResources.ColorResource { .init(name: "primaryBackground", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 4 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `icon_rating`.
    var icon_rating: RswiftResources.ImageResource { .init(name: "icon_rating", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `locationPin`.
    var locationPin: RswiftResources.ImageResource { .init(name: "locationPin", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `placeholder_image`.
    var placeholder_image: RswiftResources.ImageResource { .init(name: "placeholder_image", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `search-icon`.
    var searchIcon: RswiftResources.ImageResource { .init(name: "search-icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.entitlements` struct is generated, and contains static references to 0 properties.
  struct entitlements {
    let comAppleSecurityAppSandbox: Bool = true
    let comAppleSecurityFilesUserSelectedReadOnly: Bool = true
  }

  /// This `_R.font` struct is generated, and contains static references to 1 fonts.
  struct font: Sequence {
    let bundle: Foundation.Bundle

    /// Font `SFProDisplay-Regular`.
    var sfProDisplayRegular: RswiftResources.FontResource { .init(name: "SFProDisplay-Regular", bundle: bundle, filename: "sf_regular.otf") }

    func makeIterator() -> IndexingIterator<[RswiftResources.FontResource]> {
      [sfProDisplayRegular].makeIterator()
    }
    func validate() throws {
      for font in self {
        if !font.canBeLoaded() { throw RswiftResources.ValidationError("[R.swift] Font '\(font.name)' could not be loaded, is '\(font.filename)' added to the UIAppFonts array in this targets Info.plist?") }
      }
    }
  }

  /// This `_R.file` struct is generated, and contains static references to 1 resource files.
  struct file {
    let bundle: Foundation.Bundle

    /// Resource file `sf_regular.otf`.
    var sf_regularOtf: RswiftResources.FileResource { .init(name: "sf_regular", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }
  }
}